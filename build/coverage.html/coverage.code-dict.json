{"/home/travis/build/npmtest/node-npmtest-gulp-rev-all/test.js":"/* istanbul instrument in package npmtest_gulp_rev_all */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-rev-all/lib.npmtest_gulp_rev_all.js":"/* istanbul instrument in package npmtest_gulp_rev_all */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_rev_all = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_rev_all = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-rev-all/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-rev-all && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_rev_all */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_rev_all\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_rev_all.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_rev_all.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_rev_all.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_rev_all.__dirname +\n                    '/lib.npmtest_gulp_rev_all.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-rev-all/gulp-rev-all/index.js":"var Through = require('through2');\nvar Revisioner = require('./revisioner');\nvar gutil = require('gulp-util');\nvar PluginError = gutil.PluginError;\n\nvar PLUGIN_NAME = 'gulp-rev-all';\n\nmodule.exports = {\n  \n  revision: function(options) {\n\n    var revisioner = new Revisioner(options);\n\n    // Feed the RevAll Revisioner with all the files in the stream, don't emit them until all of them have been processed\n    return Through.obj(function (file, enc, callback) {\n\n      if (file.isStream()) {\n        this.emit('error', new PluginError(PLUGIN_NAME, 'Streams not supported!'));      \n        return callback();\n      }\n\n      if (file.isBuffer()) {\n        revisioner.processFile(file);\n      }\n\n      file.revisioner = revisioner;\n\n      callback();\n\n    }, function (callback) {\n\n      revisioner.run();\n\n      var files = revisioner.files;\n      for (var filename in files) {\n        this.push(files[filename]);\n      }\n      callback();\n\n    });\n\n  },\n\n  versionFile: function() {\n\n    var revisioner;\n\n    // Drop any existing files off the stream, push the generated version file\n    return Through.obj(function (file, enc, callback) {\n\n      if (!revisioner) {\n        revisioner = file.revisioner;\n      }\n\n      // Drop any existing files off the stream\n      callback();\n\n    }, function (callback) {\n\n      if (!revisioner) {\n        this.emit('error', new PluginError(PLUGIN_NAME, 'revision() must be called first!'));\n        return callback();\n      }\n\n      this.push(revisioner.versionFile());\n      callback();\n\n    });\n\n\n  },\n\n  manifestFile: function() {\n\n    var revisioner;\n\n    // Drop any existing files off the stream, push the generated manifest file\n    return Through.obj(function (file, enc, callback) {\n\n      if (!revisioner) {\n        revisioner = file.revisioner;\n      }\n      callback();\n\n    }, function (callback) {\n\n      if (!revisioner) {\n        this.emit('error', new PluginError(PLUGIN_NAME, 'revision() must be called first!'));\n        return callback();\n      }\n\n      this.push(revisioner.manifestFile());\n      callback();\n\n    });\n\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-rev-all/gulp-rev-all/revisioner.js":"var Gutil = require('gulp-util');\nvar Merge = require('merge');\nvar Path = require('path');\nvar Tool = require('./tool');\n\nvar Revisioner = (function () {\n  'use strict';\n  var Revisioner = function(options) {\n\n    var defaults = {\n      'hashLength': 8,\n      'dontGlobal': [ /^\\/favicon.ico$/g ],\n      'dontRenameFile': [],\n      'dontUpdateReference': [],\n      'dontSearchFile': [],\n      'fileNameVersion': 'rev-version.json',\n      'fileNameManifest': 'rev-manifest.json',\n      'prefix': '',\n      'referenceToRegexs': referenceToRegexs,\n      'annotator': annotator,\n      'replacer': replacer,\n      'debug': false,\n      'includeFilesInManifest': ['.css', '.js']\n    };\n\n    this.options = Merge(defaults, options);\n\n    // File pool, any file passed into the Revisioner is stored in this object\n    this.files = {};\n    this.filesTemp = [];\n\n    // Stores the combined hash of all processed files, used to create the version file\n    this.hashCombined = '';\n\n    // Stores the before : after path of assets, used to create the manifset file\n    this.manifest = {};\n\n    // Enable / Disable logger based on supplied options\n    this.log = (this.options.debug) ? Gutil.log : function () {};\n\n    // Make tools available client side callbacks supplied in options\n    this.Tool = Tool;\n\n\n    var nonFileNameChar = '[^a-zA-Z0-9\\\\.\\\\-\\\\_\\\\/]';\n    var qoutes = '\\'|\"';\n\n    function referenceToRegexs(reference) {\n      var escapedRefPathBase = Tool.path_without_ext(reference.path).replace(/([^0-9a-z])/ig, '\\\\$1');\n      var escapedRefPathExt = Path.extname(reference.path).replace(/([^0-9a-z])/ig, '\\\\$1');\n\n      var regExp, regExps = [];\n      var isJSReference = reference.path.match(/\\.js$/);\n\n      // Extensionless javascript file references has to to be qouted\n      if (isJSReference) {\n        regExp = '('+ qoutes +')(' + escapedRefPathBase + ')()('+ qoutes + '|$)';\n        regExps.push(new RegExp(regExp, 'g'));\n      }\n\n      // Expect left and right sides of the reference to be a non-filename type character, escape special regex chars\n      regExp = '('+ nonFileNameChar +')(' + escapedRefPathBase + ')(' +  escapedRefPathExt + ')('+ nonFileNameChar + '|$)';\n      regExps.push(new RegExp(regExp, 'g'));\n\n      return regExps;\n    }\n\n    function annotator(contents, path) {\n      return [{'contents': contents}];\n    }\n\n    function replacer(fragment, replaceRegExp, newReference, referencedFile) {\n       fragment.contents = fragment.contents.replace(replaceRegExp, '$1' + newReference + '$3$4');\n    }\n\n  };\n\n  Revisioner.prototype.versionFile = function () {\n\n    var out = {\n      hash: this.hashCombined,\n      timestamp: new Date()\n    };\n\n    var file = new Gutil.File({\n      cwd: this.pathCwd,\n      base: this.pathBase,\n      path: Path.join(this.pathBase, this.options.fileNameVersion),\n      contents: new Buffer(JSON.stringify(out, null, 2)),\n      revisioner: this\n    });\n\n    file.revisioner = this;\n    return file;\n\n  };\n\n  Revisioner.prototype.manifestFile = function () {\n\n    var file = new Gutil.File({\n      cwd: this.pathCwd,\n      base: this.pathBase,\n      path: Path.join(this.pathBase, this.options.fileNameManifest),\n      contents: new Buffer(JSON.stringify(this.manifest, null, 2)),\n    });\n\n    file.revisioner = this;\n    return file;\n\n  };\n\n  /**\n   * Used to feed files into the Revisioner, sets up the original filename and hash.\n   */\n  Revisioner.prototype.processFile = function (file) {\n\n    if (!this.pathCwd) {\n      this.pathCwd = file.cwd;\n    }\n\n    // Chnage relative paths to absolute\n    if (!file.base.match(/^(\\/|[a-z]:)/i)) {\n      file.base = Tool.join_path(file.cwd, file.base);\n    }\n\n    // Normalize the base common to all the files\n    if (!this.pathBase) {\n\n      this.pathBase = file.base;\n\n    } else if (file.base.indexOf(this.pathBase) === -1) {\n\n      var levelsBase = this.pathBase.split(/[\\/|\\\\]/);\n      var levelsFile = file.base.split(/[\\/|\\\\]/);\n\n      var common = [];\n      for (var level = 0, length = levelsFile.length; level < length; level++) {\n\n        if (level < levelsBase.length && level < levelsFile.length &&\n            levelsBase[level] === levelsFile[level]) {\n          common.push(levelsFile[level]);\n          continue;\n        }\n      }\n\n      if (common[common.length - 1] !== '') {\n        common.push('');\n      }\n      this.pathBase = common.join('/');\n\n    }\n\n    // Set original values before any processing occurs\n    file.revPathOriginal = file.revOrigPath = file.path;\n    file.revFilenameExtOriginal = Path.extname(file.path);\n    file.revFilenameOriginal = Path.basename(file.path, file.revFilenameExtOriginal);\n    file.revHashOriginal = this.Tool.md5(String(file.contents));\n    file.revContentsOriginal = file.contents;\n\n    this.filesTemp.push(file);\n\n  };\n\n  /**\n   * Resolves references, renames files, updates references.  To be called after all the files\n   * have been fed into the Revisioner (ie. At the end of the file stream)\n   */\n  Revisioner.prototype.run = function () {\n\n    this.hashCombined = '';\n\n    // Go through and correct the base path now that we have proccessed all the files coming in\n    for (var i = 0, length = this.filesTemp.length; i < length; i++) {\n\n      this.filesTemp[i].base = this.pathBase;\n      var path = this.Tool.get_relative_path(this.pathBase, this.filesTemp[i].path);\n      this.files[path] = this.filesTemp[i];\n\n    }\n\n    // Resolve references to other files\n    for (var path in this.files) {\n      this.resolveReferences(this.files[path]);\n    }\n\n    // Resolve and set revisioned filename based on hash + reference hashes and ignore rules\n    for (var path in this.files) {\n      this.revisionFilename(this.files[path]);\n    }\n\n    // Consolidate the concatinated hash of all the files, into a single hash for the version file\n    this.hashCombined = this.Tool.md5(this.hashCombined);\n\n    // Update references to revisioned filenames\n    for (var path in this.files) {\n      this.updateReferences(this.files[path]);\n    }\n\n  };\n\n  /**\n   * Go through each file in the file pool, search for references to any other file in the pool.\n   */\n  Revisioner.prototype.resolveReferences = function (fileResolveReferencesIn) {\n\n\n    var contents = String(fileResolveReferencesIn.revContentsOriginal);\n    fileResolveReferencesIn.revReferencePaths = {};\n    fileResolveReferencesIn.revReferenceFiles = {};\n    var referenceGroupRelative = [];\n    var referenceGroupAbsolute = [];\n    fileResolveReferencesIn.referenceGroupsContainer = {\n      'relative': referenceGroupRelative,\n      'absolute': referenceGroupAbsolute\n    };\n\n    // Don't try and resolve references in binary files or files that have been blacklisted\n    if (this.Tool.is_binary_file(fileResolveReferencesIn) || !this.shouldSearchFile(fileResolveReferencesIn)) {\n      return;\n    }\n\n    // For the current file (fileResolveReferencesIn), look for references to any other file in the project\n    for (var path in this.files) {\n\n      // Organize them by relative vs absolute reference types\n      var fileCurrentReference = this.files[path];\n      var references;\n\n      references = this.Tool.get_reference_representations_relative(fileCurrentReference, fileResolveReferencesIn);\n      for (var i = 0, length = references.length; i < length; i++) {\n        referenceGroupRelative.push({\n          'file': this.files[path],\n          'path': references[i]\n        });\n      }\n\n      references = this.Tool.get_reference_representations_absolute(fileCurrentReference, fileResolveReferencesIn);\n      for (var i = 0, length = references.length; i < length; i++) {\n        referenceGroupAbsolute.push({\n          'file': this.files[path],\n          'path': references[i]\n        });\n      }\n\n    }\n\n    // Priority relative references higher than absolute\n    for (var referenceType in fileResolveReferencesIn.referenceGroupsContainer) {\n      var referenceGroup = fileResolveReferencesIn.referenceGroupsContainer[referenceType];\n\n      for (var referenceIndex = 0, referenceGroupLength = referenceGroup.length; referenceIndex < referenceGroupLength; referenceIndex++) {\n        var reference = referenceGroup[referenceIndex];\n        var regExps = this.options.referenceToRegexs(reference);\n\n        for (var j = 0; j < regExps.length; j++) {\n          if (contents.match(regExps[j])) {\n            // Only register this reference if we don't have one already by the same path\n            if (!fileResolveReferencesIn.revReferencePaths[reference.path]) {\n\n              fileResolveReferencesIn.revReferenceFiles[reference.file.path] = reference.file;\n              fileResolveReferencesIn.revReferencePaths[reference.path] = {\n                'regExps': [regExps[j]],\n                'file': reference.file,\n                'path': reference.path\n              };\n              this.log('gulp-rev-all:', 'Found', referenceType, 'reference [', Gutil.colors.magenta(reference.path), '] -> [', Gutil.colors.green(reference.file.path), '] in [', Gutil.colors.blue(fileResolveReferencesIn.revPathOriginal), ']');\n            } else if (fileResolveReferencesIn.revReferencePaths[reference.path].file.revPathOriginal === reference.file.revPathOriginal) {\n              // Append the other regexes to account for inconsitent use\n              fileResolveReferencesIn.revReferencePaths[reference.path].regExps.push(regExps[j]);\n            } else {\n              this.log('gulp-rev-all:', 'Possible ambiguous reference detected [', Gutil.colors.red(fileResolveReferencesIn.revReferencePaths[reference.path].path), ' (', fileResolveReferencesIn.revReferencePaths[reference.path].file.revPathOriginal, ')] <-> [', Gutil.colors.red(reference.path), '(', Gutil.colors.red(reference.file.revPathOriginal), ')]');\n            }\n          }\n        }\n      }\n    }\n\n\n  };\n\n  /**\n   * Calculate hash based contents and references.\n   * hash = hash(file hash + hash(hash references 1 + hash reference N)..)\n   */\n  Revisioner.prototype.calculateHash = function (file, stack) {\n\n    stack = stack || [];\n    var hash = file.revHashOriginal;\n\n    stack.push(file);\n\n    // Resolve hash for child references\n    if (Object.keys(file.revReferenceFiles).length > 0) {\n\n      for (var key in file.revReferenceFiles) {\n\n        // Prevent infinite loops caused by circular references, don't recurse if we've already encountered this file\n        if (stack.indexOf(file.revReferenceFiles[key]) === -1) {\n          hash += this.calculateHash(file.revReferenceFiles[key], stack);\n        }\n\n      }\n\n      // This file's hash should change if any of its references will be prefixed.\n      if (this.options.prefix &&\n          Object.keys(file.referenceGroupsContainer.absolute).length) {\n        hash += this.options.prefix;\n      }\n\n      // Consolidate many hashes into one\n      hash = this.Tool.md5(hash);\n\n    }\n\n    return hash;\n\n  };\n\n\n  /**\n   * Revision filename based on internal contents + references.\n   */\n  Revisioner.prototype.revisionFilename = function (file) {\n\n    var filename = file.revFilenameOriginal;\n    var ext = file.revFilenameExtOriginal;\n\n    file.revHash = this.calculateHash(file);\n\n    // Allow the client to transform the final filename\n    if (this.options.transformFilename) {\n      filename = this.options.transformFilename.call(this, file, file.revHash);\n    } else {\n      filename = filename + '.' + file.revHash.substr(0, this.options.hashLength) + ext;\n    }\n\n    file.revFilename = filename;\n    // file.revFilenameNoExt = Tool.path_without_ext(file.revFilename);\n\n    if (this.shouldFileBeRenamed(file)) {\n      file.path = this.Tool.join_path(Path.dirname(file.path), filename);\n    }\n\n    // Maintain the combined hash used in version file\n    this.hashCombined += file.revHash;\n\n    // Maintain the manifset file\n    var pathOriginal = this.Tool.get_relative_path(this.pathBase, file.revPathOriginal, true);\n    var pathRevisioned = this.Tool.get_relative_path(file.base, file.path, true);\n    // Add only specific file types to the manifest file\n    if (this.options.includeFilesInManifest.indexOf(ext) !== -1) {\n        this.manifest[pathOriginal] = pathRevisioned;\n    }\n\n    file.revPath = pathRevisioned;\n\n  };\n\n  /**\n   * Update the contents of a file with the revisioned filenames of its references.\n   */\n  Revisioner.prototype.updateReferences = function (file) {\n\n    // Don't try and update references in binary files or blacklisted files\n    if (this.Tool.is_binary_file(file) || !this.shouldSearchFile(file)) {\n      return;\n    }\n\n    var contents = String(file.revContentsOriginal);\n    var annotatedContent = this.options.annotator(contents, file.revPathOriginal);\n\n    for (var pathReference in file.revReferencePaths) {\n\n      var reference = file.revReferencePaths[pathReference];\n\n      // Replace regular filename with revisioned version\n      var referencePath = reference.path.substr(0, reference.path.length - (reference.file.revFilenameOriginal.length + reference.file.revFilenameExtOriginal.length));\n      var pathReferenceReplace = referencePath + reference.file.revFilename;\n\n\n      if (this.options.transformPath) {\n        // Transform path using client supplied transformPath callback,\n        pathReferenceReplace = this.options.transformPath.call(this, pathReferenceReplace, reference.path, reference.file, file);\n      } else if (this.options.prefix && pathReferenceReplace[0] === '/') {\n        // Append with user supplied prefix\n        pathReferenceReplace = this.Tool.join_path_url(this.options.prefix, pathReferenceReplace);\n      }\n\n      if (this.shouldUpdateReference(reference.file)) {\n        // The extention should remain constant so we dont add extentions to references without extentions\n        var noExtReplace = Tool.path_without_ext(pathReferenceReplace);\n\n        for(var i = 0; i < annotatedContent.length; i++){\n          for(var j = 0; j < reference.regExps.length; j++){\n            this.options.replacer(annotatedContent[i], reference.regExps[j], noExtReplace, reference.file);\n          }\n        }\n      }\n\n    }\n\n    contents = annotatedContent.map(function(annotation) { return annotation.contents; }).join('');\n    file.contents = new Buffer(contents);\n\n  };\n\n  /**\n   * Determines if a file should be renamed based on dontRenameFile supplied in options.\n   */\n  Revisioner.prototype.shouldFileBeRenamed = function (file) {\n\n    var filename = this.Tool.get_relative_path(file.base, file.revPathOriginal);\n\n    for (var i = this.options.dontGlobal.length; i--;) {\n      var regex = (this.options.dontGlobal[i] instanceof RegExp) ? this.options.dontGlobal[i] : new RegExp(this.options.dontGlobal[i] + '$', 'ig');\n      if (filename.match(regex)) {\n        return false;\n      }\n    }\n\n    for (var i = this.options.dontRenameFile.length; i--;) {\n      var regex = (this.options.dontRenameFile[i] instanceof RegExp) ? this.options.dontRenameFile[i] : new RegExp(this.options.dontRenameFile[i] + '$', 'ig');\n      if (filename.match(regex)) {\n        return false;\n      }\n    }\n    return true;\n\n  };\n\n\n  /**\n   * Determines if a particular reference should be updated across assets based on dontUpdateReference supplied in options.\n   */\n  Revisioner.prototype.shouldUpdateReference = function (file) {\n\n    var filename = this.Tool.get_relative_path(file.base, file.revPathOriginal);\n\n    for (var i = this.options.dontGlobal.length; i--;) {\n      var regex = (this.options.dontGlobal[i] instanceof RegExp) ? this.options.dontGlobal[i] : new RegExp(this.options.dontGlobal[i] + '$', 'ig');\n      if (filename.match(regex)) {\n        return false;\n      }\n    }\n\n    for (var i = this.options.dontUpdateReference.length; i--;) {\n      var regex = (this.options.dontUpdateReference[i] instanceof RegExp) ? this.options.dontUpdateReference[i] : new RegExp(this.options.dontUpdateReference[i] + '$', 'ig');\n      if (filename.match(regex)) {\n        return false;\n      }\n    }\n    \n    return true;\n\n  };\n\n  /**\n   * Determines if a particular reference should be updated across assets based on dontUpdateReference supplied in options.\n   */\n  Revisioner.prototype.shouldSearchFile = function (file) {\n\n    var filename = this.Tool.get_relative_path(file.base, file.revPathOriginal);\n\n    for (var i = this.options.dontGlobal.length; i--;) {\n      var regex = (this.options.dontGlobal[i] instanceof RegExp) ? this.options.dontGlobal[i] : new RegExp(this.options.dontGlobal[i] + '$', 'ig');\n      if (filename.match(regex)) {\n        return false;\n      }\n    }\n\n    for (var i = this.options.dontSearchFile.length; i--;) {\n      var regex = (this.options.dontSearchFile[i] instanceof RegExp) ? this.options.dontSearchFile[i] : new RegExp(this.options.dontSearchFile[i] + '$', 'ig');\n      if (filename.match(regex)) {\n        return false;\n      }\n    }\n    return true;\n\n  };\n\n  return Revisioner;\n\n\n})();\n\nmodule.exports = Revisioner;\n","/home/travis/build/npmtest/node-npmtest-gulp-rev-all/gulp-rev-all/tool.js":"var Path = require('path');\nvar crypto = require('crypto');\n\nmodule.exports = (function() {\n  'use strict';\n\n  var path_without_ext = function(path) {\n    var ext = Path.extname(path);\n    return path.substr(0, path.length - ext.length);\n  };\n  \n  var dirname_with_sep = function(path) {\n    return Path.dirname(path).replace(/\\\\/g, '/') + '/';\n  }\n\n  var join_path_url = function (prefix, path) {\n\n    prefix = prefix.replace(/\\/$/, '');\n    path = path.replace(/^\\//, '');\n    return [ prefix, path ].join('/');\n\n  };\n\n  /**\n   * Joins a directory and a filename, replaces Windows forward-slash with a backslash.\n   */\n  var join_path = function (directory, filename) {\n\n    return Path.join(directory, filename).replace(/^[a-z]:\\\\/i, '/').replace(/\\\\/g, '/');\n    \n  };\n\n  /**\n   * Given a base path and resource path, will return resource path relative to the base.\n   * Also replaces Windows forward-slash with a backslash.\n   */\n  var get_relative_path = function (base, path, noStartingSlash) {\n\n    if (base === path) {\n      return '';\n    }\n\n    // Sanitize inputs, convert windows to posix style slashes, ensure trailing slash for base\n    base = base.replace(/^[a-z]:/i, '').replace(/\\\\/g, '/').replace(/\\/$/g, '') + '/';\n    path = path.replace(/^[a-z]:/i, '').replace(/\\\\/g, '/');\n\n    // Only truncate paths that overap with the base\n    if (base === path.substr(0, base.length)) {\n      path = '/' + path.substr(base.length);\n    }\n\n    var modifyStartingSlash = noStartingSlash !== undefined;\n    if (modifyStartingSlash) {\n      if (path[0] === '/' && noStartingSlash) {\n        path = path.substr(1);\n      } else if (path[0] !== '/' && !noStartingSlash){\n        path = '/' + path;\n      }\n    }\n\n    return path;\n\n  };\n\n  var md5 = function (str) {\n\n    return crypto.createHash('md5').update(str, 'utf8').digest('hex');\n\n  };\n\n  var is_binary_file = function (file) {\n\n    var length = (file.contents.length > 50) ? 50 : file.contents.length;\n    for (var i = 0; i < length; i++) {\n      if (file.contents[i] === 0) {\n        return true;\n      }\n    }\n    return false;\n\n  };\n\n  /**\n   * Given a file (context) and a file reference, return all the possible representations of paths to get from\n   * the context to the reference file.\n   *\n   */\n  var get_reference_representations_relative = function (fileCurrentReference, file) {\n\n    var representations = [];\n\n    //  Scenario 2: Current file is the same directory or lower than the reference\n    //        (ie. file.path and the reference file.path are the same)\n    //\n    //          file.base = /user/project\n    //          file.path = /user/project/second/current_file.html\n    //  fileCurrentReference.path = /user/project/second/index.html\n\n    if (dirname_with_sep(fileCurrentReference.path).indexOf(dirname_with_sep(file.path)) === 0) {\n\n      //  index.html\n      representations.push(get_relative_path(Path.dirname(file.path), fileCurrentReference.revPathOriginal, true));\n\n      //  ./index.html   (reference: relative)\n      representations.push('.' + get_relative_path(Path.dirname(file.path), fileCurrentReference.revPathOriginal, false));\n    }\n\n    //  Scenario 3: Current file is in a different child directory than the reference\n    //      (ie. file.path and the reference file.path are different, not in root directory)\n    //\n    //          file.base = /user/project\n    //          file.path = /user/project/first/index.html\n    //  fileCurrentReference.path = /user/project/second/index.html\n\n    if (dirname_with_sep(file.path) !== dirname_with_sep(fileCurrentReference.path) &&\n      dirname_with_sep(fileCurrentReference.path).indexOf(dirname_with_sep(file.path)) === -1) {\n\n      var pathCurrentReference = dirname_with_sep(get_relative_path(fileCurrentReference.base, fileCurrentReference.revPathOriginal));\n      var pathFile = dirname_with_sep(get_relative_path(file.base, file.revPathOriginal));\n\n      // ../second/index.html\n      var relPath = Path.relative(pathFile, pathCurrentReference);\n      relPath = relPath.replace(/\\\\/g, '/');\n      representations.push(relPath + '/' + Path.basename(fileCurrentReference.revPathOriginal));\n    }\n\n    return representations;\n\n  };\n\n  /**\n   * Given a file (context) and a file reference, return all the possible representations of paths to get from\n   * the context to the reference file.\n   *\n   */\n  var get_reference_representations_absolute = function (fileCurrentReference, file) {\n\n    var representations = [];\n    var representation;\n\n    //  Scenario 1: Current file is anywhere\n    //  /view/index.html  (reference: absolute)\n    representations.push(get_relative_path(fileCurrentReference.base, fileCurrentReference.revPathOriginal, false));\n    \n    // Without starting slash, only if it contains a directory\n    // view/index.html  (reference: absolute, without slash prefix)\n    representation = get_relative_path(fileCurrentReference.base, fileCurrentReference.revPathOriginal, true);\n    if (representation.indexOf('/')) {\n      representations.push(representation);\n    }\n\n    return representations;\n\n  };\n\n\n  return {\n    get_relative_path: get_relative_path,\n    md5: md5,\n    is_binary_file: is_binary_file,\n    path_without_ext: path_without_ext,\n    join_path: join_path,\n    join_path_url: join_path_url,\n    get_reference_representations_relative: get_reference_representations_relative,\n    get_reference_representations_absolute: get_reference_representations_absolute\n  };\n\n})();\n"}